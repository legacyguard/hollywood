// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get Supabase configuration from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('Missing Supabase environment variables. Please check your .env.local file.');
}

// Create Supabase client with SSR-safe configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    // SSR-safe: only use localStorage in browser environment
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    // Enable only in the browser to avoid SSR touching storage/timers
    persistSession: typeof window !== 'undefined',
    autoRefreshToken: typeof window !== 'undefined',
  },
  // Enable real-time subscriptions
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Export for convenience
export default supabase;

// Helper function to get Clerk auth - not a hook
const getClerkAuth = async () => {
  if (typeof window === 'undefined') {
    return { userId: null };
  }
  
  try {
    // This is problematic - we can't call hooks dynamically
    // This function should be refactored to not use hooks
    return { userId: null };
  } catch (error) {
    console.warn('Clerk not available:', error);
    return { userId: null };
  }
};

// Clerk integration hook - moved from lib/supabase.ts
export const useSupabaseClient = () => {

  const createClerkSupabaseClient = async () => {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      throw new Error("Supabase configuration is missing. Please check your environment variables.");
    }

    try {
      // Use the main supabase client
      const supabaseClient = supabase;
      
      // Get Clerk user ID if available
      const { userId } = await getClerkAuth();
      
      // For development - we can add custom header with Clerk user ID for debugging
      if (userId && typeof window !== 'undefined') {
        // This is just for identification, not for authentication
        // In production, you should use Clerk JWT template
        // Note: This is a simplified implementation for development
        // In production, use proper JWT template integration with Clerk
        console.log('User ID for Supabase context:', userId);
      }
      
      return supabaseClient;
    } catch (error) {
      console.error('Error creating Supabase client:', error);
      // Fallback to standard client
      return supabase;
    }
  };

  return createClerkSupabaseClient;
};