-- Create survivor manual entries table for Family Shield Protocol
CREATE TABLE survivor_manual_entries (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  entry_type VARCHAR(50) NOT NULL CHECK (entry_type IN (
    'important_contacts',
    'financial_access',
    'property_management',
    'funeral_wishes',
    'document_locations',
    'custom_instruction',
    'emergency_procedure',
    'child_care_instructions'
  )),
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  is_completed BOOLEAN DEFAULT false,
  priority INTEGER DEFAULT 1 CHECK (priority > 0),
  tags TEXT[],
  related_document_ids UUID[],
  is_auto_generated BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS (Row Level Security)
ALTER TABLE survivor_manual_entries ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view their own manual entries
CREATE POLICY "Users can view own manual entries" ON survivor_manual_entries
  FOR SELECT USING (auth.uid() = user_id);

-- Policy: Users can insert their own manual entries
CREATE POLICY "Users can insert own manual entries" ON survivor_manual_entries
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Policy: Users can update their own manual entries
CREATE POLICY "Users can update own manual entries" ON survivor_manual_entries
  FOR UPDATE USING (auth.uid() = user_id);

-- Policy: Users can delete their own manual entries
CREATE POLICY "Users can delete own manual entries" ON survivor_manual_entries
  FOR DELETE USING (auth.uid() = user_id);

-- Add indexes for performance
CREATE INDEX idx_manual_entries_user_id ON survivor_manual_entries(user_id);
CREATE INDEX idx_manual_entries_type ON survivor_manual_entries(user_id, entry_type);
CREATE INDEX idx_manual_entries_priority ON survivor_manual_entries(user_id, priority, is_completed);
CREATE INDEX idx_manual_entries_completed ON survivor_manual_entries(user_id, is_completed);
CREATE INDEX idx_manual_entries_tags ON survivor_manual_entries USING gin(tags);

-- Add updated_at trigger
CREATE TRIGGER update_manual_entries_updated_at 
  BEFORE UPDATE ON survivor_manual_entries 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- Create function to calculate completion percentage
CREATE OR REPLACE FUNCTION get_manual_completion_percentage(p_user_id UUID)
RETURNS INTEGER AS $$
DECLARE
  total_entries INTEGER;
  completed_entries INTEGER;
  percentage INTEGER;
BEGIN
  SELECT COUNT(*) INTO total_entries 
  FROM survivor_manual_entries 
  WHERE user_id = p_user_id;
  
  IF total_entries = 0 THEN
    RETURN 0;
  END IF;
  
  SELECT COUNT(*) INTO completed_entries 
  FROM survivor_manual_entries 
  WHERE user_id = p_user_id AND is_completed = true;
  
  percentage := ROUND((completed_entries::DECIMAL / total_entries::DECIMAL) * 100);
  
  RETURN percentage;
END;
$$ LANGUAGE plpgsql;

-- Add comments
COMMENT ON TABLE survivor_manual_entries IS 'User-created entries for the Family Shield Survivor Manual';
COMMENT ON COLUMN survivor_manual_entries.user_id IS 'Reference to the user who owns this entry';
COMMENT ON COLUMN survivor_manual_entries.entry_type IS 'Category of the manual entry';
COMMENT ON COLUMN survivor_manual_entries.title IS 'Title/summary of the entry';
COMMENT ON COLUMN survivor_manual_entries.content IS 'Detailed content/instructions';
COMMENT ON COLUMN survivor_manual_entries.is_completed IS 'Whether this entry has been completed by the user';
COMMENT ON COLUMN survivor_manual_entries.priority IS 'Priority level (1 = highest)';
COMMENT ON COLUMN survivor_manual_entries.tags IS 'Array of tags for categorization';
COMMENT ON COLUMN survivor_manual_entries.related_document_ids IS 'Array of related document IDs';
COMMENT ON COLUMN survivor_manual_entries.is_auto_generated IS 'Whether this entry was auto-generated by the system';