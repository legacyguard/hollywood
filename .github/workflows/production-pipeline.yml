name: Production Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20.18.0'
  PNPM_VERSION: '8'

jobs:
  # ============================================
  # Security Analysis
  # ============================================
  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          npm audit fix --audit-level=moderate || true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'LegacyGuard'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            npm-audit.json
            snyk-report.json
            dependency-check-report.html

  # ============================================
  # Code Quality
  # ============================================
  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --format json --output-file eslint-report.json || true

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

      - name: Check bundle size
        run: |
          npm run build
          npx bundlesize

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            coverage/

  # ============================================
  # Unit Tests
  # ============================================
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests (shard ${{ matrix.shard }}/4)
        run: npm run test:coverage -- --shard=${{ matrix.shard }}/4
        env:
          CI: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests-shard-${{ matrix.shard }}
          name: Unit Tests Shard ${{ matrix.shard }}

  # ============================================
  # E2E Tests
  # ============================================
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests (${{ matrix.browser }})
        run: npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          CI: true
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_TEST_KEY }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_TEST_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_TEST_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/

  # ============================================
  # Performance Tests
  # ============================================
  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:8080
            http://localhost:8080/dashboard
            http://localhost:8080/vault
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run load tests
        run: |
          npm install -g k6
          k6 run tests/load/stress-test.js

  # ============================================
  # Build
  # ============================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [security, quality, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENV: production

      - name: Create build info
        run: |
          echo '{
            "version": "${{ github.sha }}",
            "buildTime": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}"
          }' > dist/build-info.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # ============================================
  # Deploy to Staging
  # ============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.legacyguard.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: staging.legacyguard.com
          scope: ${{ secrets.VERCEL_SCOPE }}

      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --environment tests/postman/staging-env.json

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # Deploy to Production
  # ============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-e2e, test-performance]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://legacyguard.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Validate production config
        run: |
          node scripts/validate-production.js

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          production: true
          scope: ${{ secrets.VERCEL_SCOPE }}

      - name: Purge CDN cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Run production smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --environment tests/postman/production-env.json

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this release
            - Commit: ${{ github.sha }}
            - Build: ${{ github.run_number }}

            ## Deployment info
            - Environment: Production
            - URL: https://legacyguard.com
          draft: false
          prerelease: false

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed - v${{ github.run_number }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # Rollback Production (Manual Trigger)
  # ============================================
  rollback:
    name: 🔄 Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Vercel deployment
        run: |
          # Implement rollback logic
          echo "Rolling back to previous deployment..."

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production rollback initiated'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
